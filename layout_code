"""
             __    __       ___      .__   __.  ________   _______ 
            |  |  |  |     /   \     |  \ |  | |       /  |   ____|
            |  |__|  |    /  ^  \    |   \|  | `---/  /   |  |__   
            |   __   |   /  /_\  \   |  . `  |    /  /    |   __|  
            |  |  |  |  /  _____  \  |  |\   |   /  /----.|  |____ 
            |__|  |__| /__/     \__\ |__| \__|  /________||_______|
                                                       
            .______        ______   .______     ______   .___________.
            |   _  \      /  __  \  |   _  \   /  __  \  |           |
            |  |_)  |    |  |  |  | |  |_)  | |  |  |  | `---|  |----`
            |      /     |  |  |  | |   _  <  |  |  |  |     |  |     
            |  |\  \----.|  `--'  | |  |_)  | |  `--'  |     |  |     
            | _| `._____| \______/  |______/   \______/      |__|     
                                                          
                             ___   .___________.
                            /   \  |           |
                           /  ^  \ `---|  |----`
                          /  /_\  \    |  |     
                         /  _____  \   |  |     
                        /__/     \__\  |__|     
                                                
 _______    ___       ______ .___________.  ______   .______     ____    ____ 
|   ____|  /   \     /      ||           | /  __  \  |   _  \    \   \  /   / 
|  |__    /  ^  \   |  ,----'`---|  |----`|  |  |  | |  |_)  |    \   \/   /  
|   __|  /  /_\  \  |  |         |  |     |  |  |  | |      /      \_    _/   
|  |    /  _____  \ |  `----.    |  |     |  `--'  | |  |\  \----.   |  |     
|__|   /__/     \__\ \______|    |__|      \______/  | _| `._____|   |__|     
                                                                              
---------------------------------------------------------------------------------------------------
Teachers: Dr. Felipe N. Martins
Authors: 


ASCII Art:
    - https://patorjk.com/software/taag/#p=display&f=Star%20Wars
    - https://patorjk.com/software/taag/#p=display&f=Small
---------------------------------------------------------------------------------------------------
"""

# main.py -- put your code here!

#############################################
##  _    _ _                 _            ##
## | |  (_) |__ _ _ __ _ _ _(_)___ ___   ##
## | |__| | '_ \ '_/ _` | '_| / -_|_-<  ##
## |____|_|_.__/_| \__,_|_| |_\___/__/ ##
####################################################### Import libraries #
from machine import Pin, ADC, UART
from time import sleep
from hcsr04 import HCSR04


###############################
##  ___ _        ___ ___     ##
## | _ (_)_ _   |_ _/ _ \   ##
## |  _/ | ' \   | | (_) | ##
## |_| |_|_||_| |___\___/ ##
############################################################# Set IO Pins #
# variables for pin numbers

############
# Sensors #
###########################################################################
# light sensor ------------------------------------------------------------
LSP1 = 0
LSP2 = 0
LSP3 = 0
LSP4 = 0
LSP5 = 0

# gyro --------------------------------------------------------------------
G1 = 0

# color sensor ------------------------------------------------------------
CS1 = 0

# infrared ----------------------------------------------------------------
IRP1 = 0
IRP2 = 0

# ultrasonic --------------------------------------------------------------
US_TRIG = 0
US_ECHO = 0

###################
# Pick up System #
###########################################################################
# magnet ------------------------------------------------------------------
M1 = 0

#################
# Drive System #
###########################################################################
# Motors ------------------------------------------------------------------
MP_L = 0
MP_R = 0

# Servos ------------------------------------------------------------------
SPx_L = 0
SPy_L = 0
SPx_R = 0
SPy_R = 0


##########################################
##  ___      _ _    __   __            ##
## |_ _|_ _ (_) |_  \ \ / /_ _ _ _    ##
##  | || ' \| |  _|  \ V / _` | '_|  ##
## |___|_||_|_|\__|   \_/\__,_|_|   ##
################################################### Initialize variables #
# storing pin values in variables
# line sensor ------------------------------------------------------------
LS1 = ADC(Pin(LSP1))
LS1.atten(ADC.ATTN_11DB)
LS2 = ADC(Pin(LSP2))
LS2.atten(ADC.ATTN_11DB)
LS3 = ADC(Pin(LSP3))
LS3.atten(ADC.ATTN_11DB)
LS4 = ADC(Pin(LSP4))
LS4.atten(ADC.ATTN_11DB)
LS5 = ADC(Pin(LSP5))
LS5.atten(ADC.ATTN_11DB)

# gyroscope --------------------------------------------------------------


# color sensor -----------------------------------------------------------
# current box; none, red, green, blue, black
box_color = "none"

# infrareds --------------------------------------------------------------
IR1 = ADC(Pin(IRP1))
IR1.atten(ADC.ATTN_11DB)

IR2 = ADC(Pin(IRP2))
IR2.atten(ADC.ATTN_11DB)

# ultrasound -------------------------------------------------------------
US1 = HCSR04(trigger_pin=US_TRIG, echo_pin=US_ECHO, echo_timeout_us=10000)

# magnet -----------------------------------------------------------------
M1 = Pin(MP1, Pin.OUT)
M1.off()

# screen -----------------------------------------------------------------




###########
# States #
##########################################################################
states = "forward"

########
# PID #
##########################################################################
delta_t = 0.1
kp = 0.5
ki = 0.01
kd = 0.1

desired_line_value = 2000

prev_error = 0
accu_error = 0

######################
# Coordinate System #
##########################################################################
# Position & Angle -------------------------------------------------------
x = 0       # [m]
y = 0       # [m]
theta = 0   # [rad]

# Velocity ---------------------------------------------------------------
v_x = 0     # [m/s]
v_y = 0     # [m/s]
omega = 0   # [rad/s]

# Acceleration -----------------------------------------------------------
a_x = 0     # [m/s^2]
a_y = 0     # [m/s^2]
alpha = 0   # [rad/s^2]


#####################################################
##  ___      _ _     ___          _               ##
## |_ _|_ _ (_) |_  |   \ _____ _(_)__ ___ ___   ##
##  | || ' \| |  _| | |) / -_) V / / _/ -_|_-<  ##
## |___|_||_|_|\__| |___/\___|\_/|_\__\___/__/ ##
##################################################### Initialize Devices #


#################
# Drive System #
##########################################################################
# Motors -----------------------------------------------------------------
motorMin = 1000 # [us] =   0%
motorMax = 2000 # [us] = 100%

# Servos -----------------------------------------------------------------
servoMin = 1000 # [us] = -45°
servoMid = 1500 # [us] =   0°
servoMax = 2000 # [us] =  45°

# Servo Offsets
x_L_offset = 0
y_L_offset = 0
x_R_offset = 0
y_R_offset = 0

# Gimbal Control ---------------------------------------------------------
x_L = servoMid
y_L = servoMid
x_R = servoMid
y_R = servoMid


#############################################
##  ___             _   _                 ##
## | __|  _ _ _  __| |_(_)___ _ _  ___   ##
## | _| || | ' \/ _|  _| / _ \ ' \(_-<  ##
## |_| \_,_|_||_\__|\__|_\___/_||_/__/ ##
############################################################## Functions #
# line error
def get_line_error(desired_line_value, total_line_value):
    line_error = desired_line_value - total_line_value
    return line_error

# pid controller
def pid_controller(error, prev_error, accu_error, delta_t, kp, kd, ki):
    P = kp * error                      # Proportional term; kp is the proportional gain
    I = accu_error + ki * error * delta_t    # Intergral term; ki is the integral gain
    D = kd * (error - prev_error)/delta_t   # Derivative term; kd is the derivative gain
    
    output = P + I + D              # controller output
    
    # store values for the next iteration
    prev_error = error     # error value in the previous interation (to calculate the derivative term)
    accu_error = I      # accumulated error value (to calculate the integral term)
    
    return output, prev_error, accu_error

#################
# Drive System #
##########################################################################

# Smooth servo movement

def control_gimbal(x_L, y_L, x_R, y_R):
    # left servo




#####################################################
##   __  __      _        _                       ##
##  |  \/  |__ _(_)_ _   | |   ___  ___ _ __     ##
##  | |\/| / _` | | ' \  | |__/ _ \/ _ \ '_ \   ##
##  |_|  |_\__,_|_|_||_| |____\___/\___/ .__/  ##
##                                     |_|    ##
############################################################## MAIN LOOP #

# read all sensors
# line sensor
LS1V = LS1.read()
LS2V = LS2.read()
LS3V = LS3.read()
LS4V = LS4.read()
LS5V = LS5.read()

total_line_value = (0*LS1V + 1000*LS2V + 2000*LS3V + 3000*LS4V + 4000*LS5V) / (LS1V+LS2V+LS3V+LS4V+LS5V)

# display current state on screen
            
# switch states
#     forward
#         if no line 90° left/right; left or right dependent on gyroscope position
#         if ultrasonic obstacle scan

#     90° left
#         if longer timer 0 forward
    
#     90° right
#         if longer timer 0 forward

#     180°
#         if longest timer 0 forward

#     scan
#         if color & no box pick up
#         if color & box drop off
#         if obstacle turn 180°

#     pick up
#         if magnet on 180°

#     drop off
#         if magnet off 180°

# states effects
match states:

#     forward
#         pid 

  case "forward":
    current_line_error = get_line_error(desired_line_value, total_line_value)
    line_pid_output, prev_error, accu_error = pid_controller(current_line_error, prev_error, accu_error, delta_t, kp, kd, ki)
    # convert line_pid_output into actual motor control 
        
#     90° left
#         both motors strong left; ? second timer (however long it takes to do a full 90°, has to be measured)
  case "left":
        
#     90° right
#         both motors strong right; ? second timer
  case "right":

#     180° 
#         same as 90° but twice as long
  case "turn_around":
    
#     scan
#         use color sensor to check if box/nook or obstacle; gyroscope position assists this
#         check if box is carried right now
#         if looking at nook, compare color to current color of box
  case "scan":

#     pick up 
#         turn on magnet
#         save current color
  case "pick_up":
    M1.on()
    

#     drop off
#         turn off magnet
#         clear current color
  case "drop_off":
    M1.off()

# (states
    
#     line follow forward
#         if line straight in front just move forward; default state

#     line follow slight left
#     line follow slight right
#         adjust robot slightly if line ahead not straight; starts line sensors, ends timer based

#     line follow 90° left
#     line follow 90° right
#         full turns if no line ahead; use line + gyroscope, ends timer

#     scan obstacle  
#         if obstacle within reach use color sensor/position to see if it's box/nook
    
#     pick up box
#         activate magnet to pick up box; check if box is picked up?
    
#     drop off box
#         turn off magnet to drop box in nook

#     turn 180° degrees
#         after box picked up/dropped/obstacle detected turn around
    
#     could split up more to optimize movement to go directly to boxes/nooks vs just following line/seeking?)


"""
link libaries

set up pins & variables etc
    line sensor
    gyroscope
    color sensor
    infrareds
    ultrasound

    magnet
    current box

    states

    [motor control]

(states
    
    line follow forward
        if line straight in front just move forward; default state

    line follow slight left
    line follow slight right
        adjust robot slightly if line ahead not straight; starts line sensors, ends timer based

    line follow 90° left
    line follow 90° right
        full turns if no line ahead; use line + gyroscope, ends timer

    scan obstacle  
        if obstacle within reach use color sensor/position to see if it's box/nook
    
    pick up box
        activate magnet to pick up box; check if box is picked up?
    
    drop off box
        turn off magnet to drop box in nook

    turn 180° degrees
        after box picked up/dropped/obstacle detected turn around
    
    could split up more to optimize movement to go directly to boxes/nooks vs just following line/seeking?)

MAIN LOOP

read all sensors
            
switch states
    forward
        if line skewed left/right
        if no line 90° left/right; left or right dependent on gyroscope position
        if ultrasonic obstacle scan

    left
        if timer 0 forward
     
    right 
        if timer 0 forward

    90° left
        if longer timer 0 forward
    
    90° right
        if longer timer 0 forward

    180°
        if longest timer 0 forward

    scan
        if color & no box pick up
        if color & box drop off
        if obstacle turn 180°

    pick up
        if magnet on 180°

    drop off
        if magnet off 180°

states effects

    forward
        steady speed both motors same direction
    
    left
        steady speed both motors slight left; 2 second timer (up for tweaking)

    right
        steady speed both motors slight right; 2 second timer
        
    90° left
        both motors strong left; ? second timer (however long it takes to do a full 90°, has to be measured)
        
    90° right
        both motors strong right; ? second timer

    180° 
        same as 90° but twice as long
    
    scan
        use color sensor to check if box/nook or obstacle; gyroscope position assists this
        check if box is carried right now
        if looking at nook, compare color to current color of box

    pick up 
        turn on magnet
        save current color

    drop off
        turn off magnet
        clear current color
        
"""
